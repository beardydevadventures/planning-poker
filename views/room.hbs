<div id="roomNo" class="alert alert-primary" role="alert">
    Placeholder message...
</div>

<div class="row">
    <div class="col">
        <div class="text-center">
            <div id="task-name-area">
                <h1 id="task-name" class="d-inline mb-2">New Task</h1>
            </div>
            <form id="task-name-form" class="form-inline ">
                <div class="input-group mb-3">
                    <input type="text" class="form-control" id="task-name-field" value="New Task" aria-label="message"
                        aria-describedby="button-addon2">
                    <div class="input-group-append">
                        <button class="btn btn-primary" type="submit" id="button-addon2">Update</button>
                    </div>
                </div>
            </form>
            <hr>
        </div>

        <div class="text-center mb-3">
            {{#each cards}}
            {{> card this}}
            {{/each}}
        </div>

        <div class="progress mb-3">
            <div class="progress-bar poker-progress-bar" style="width: 0%;" role="progressbar" aria-valuenow="00"
                aria-valuemin="0" aria-valuemax="100"></div>
        </div>

        <div class="played-cards text-center mb-3">
        </div>
        <div class="text-center mb-3">
            <h5 class="total-effort"></h5>
        </div>

        <ul id="messages" class="list-group"></ul>
    </div>
    <div class="col-3">
        <div class="admin-controls mb-3">
            <div class="card shadow-sm">
                <h5 class="card-header">Controls</h5>
                <div class="card-body">
                    <button type="button" class="btn btn-success btn-block start-poker">Start Poker</button>
                    <button type="button" class="btn btn-info btn-block reveal-poker">Reveal Cards</button>
                    {{!-- <button type="button" class="btn btn-outline-danger btn-block stop-poker">Stop</button>
            <button type="button" class="btn btn-outline-danger btn-block resume-poker">Resume</button> --}}
                    <button type="button" class="btn btn-warning btn-block reset-poker">Restart</button>
                    <button type="button" class="btn btn-secondary btn-block edit-task-btn">Edit Task Name</button>
                </div>
            </div>
        </div>

        <div class="card shadow-sm">
            <div class="card-body">
                <h5 class="card-title poker-roomname">Card title</h5>
                <form id="message-form" class="form-inline ">
                    <div class="input-group mb-3">
                        <input type="text" class="form-control form-control-sm" id="message"
                            placeholder="Message room..." aria-label="message" aria-describedby="button-addon2">
                        <div class="input-group-append">
                            <button class="btn btn-outline-secondary btn-sm" type="submit"
                                id="button-addon2">Send</button>
                        </div>
                    </div>
                </form>
                <h6 class="card-subtitle mb-2 text-muted">Room members</h6>
                <div id="users" class="list-group"></div>
            </div>
        </div>

    </div>
</div>
{{> scripts}}
<script>
    $(function () {
        let roomData = {};
        if (window.location.hash) {
            hash = window.location.hash.substring(1);
            roomData.hash = hash;
            roomData.roomname = '';
            if (localStorage.getItem(hash + 'room') !== null) {
                roomData.roomname = localStorage[hash + 'room'];
            }
            roomData.username = '';
            if (localStorage.getItem('pp-username') !== null) {
                roomData.username = localStorage['pp-username'];
            }
            roomController(roomData);
        } else {
            window.location.href = "/";
        }
    });

    function roomController(roomData) {
        const socket = io();
        let isHost = false;

        //hide all controls
        $('#task-name-form').hide();
        $('.edit-task-btn').hide();
        $('.admin-controls').hide();

        //disable cards
        $('.poker-card').attr('disabled', 'disabled');
        $('.admin-controls .btn').attr('disabled', 'disabled');
        $('.admin-controls .start-poker').removeAttr('disabled');
        $('.admin-controls .edit-task-btn').removeAttr('disabled');

        //enable buttons

        //connecting to room
        socket.emit('connectToRoom', roomData);

        socket.on('connectedToRoom', function (response) {
            $('#roomNo').html(response.message);
            if (response.is_host) {
                $('.admin-controls').show();
                isHost = true;
            } else {
                //we need to show all previous room content
                $.each(response.room.chat_history, function (i, val) {
                    $('#messages').append($('<li class="list-group-item">').html(val));
                });
            }
            $('.poker-username').text(response.username);
            $('.poker-roomname').text(response.room.name);
        });

        //for planning poker
        $('.start-poker').on("click", function () {
            $('.admin-controls .btn').attr('disabled', 'disabled');
            $('.admin-controls .reset-poker').removeAttr('disabled');
            socket.emit('startPoker', { "room": hash });
        });

        $('.reset-poker').on("click", function () {
            $('.admin-controls .btn').attr('disabled', 'disabled');
            $('.admin-controls .start-poker').removeAttr('disabled');
            $('.admin-controls .edit-task-btn').removeAttr('disabled');
            socket.emit('restartPoker', { "room": hash });
        });

        $('.stop-poker').on("click", function () {
            socket.emit('stopPoker', { "room": hash });
        });

        $('.resume-poker').on("click", function () {
            socket.emit('resumePoker', { "room": hash });
        });

        $('.reveal-poker').on("click", function () {
            $('.admin-controls .btn').attr('disabled', 'disabled');
            $('.admin-controls .start-poker').removeAttr('disabled');
            $('.admin-controls .reset-poker').removeAttr('disabled');
            $('.admin-controls .edit-task-btn').removeAttr('disabled');
            socket.emit('revealPoker', { "room": hash });
        });

        $('.poker-card').on("click", function () {
            let value = $(this).data("value");
            $('.poker-card').attr('disabled', 'disabled');
            socket.emit('pokerPlayed', { "room": hash, "value": value, "user": socket.id });
        });

        socket.on('unlockCards', function (msg) {
            $('.poker-card').removeAttr('disabled');
        });

        socket.on('lockCards', function (msg) {
            $('.poker-card').attr('disabled', 'disabled');
        });

        socket.on('updatePercentage', function (percent) {
            $('.poker-progress-bar').width(percent + '%');
        });

        socket.on('updateCards', function (cards) {
            $('.played-cards').empty();
            $('.total-effort').empty();
            $.each(cards, function (i, val) {
                $('.played-cards').append($('<div class="btn btn-primary btn-lg played-card mb-1 mr-1" data-value="' + val + '">').text('?'));
            });
        });

        socket.on('revealCards', function (average) {
            $('.played-card').each(function (i, val) {
                $(this).text($(this).data("value"));
            });
            $('.total-effort').text('Estimated effort ' + average);
        });

        socket.on('pokerFinished', function () {
            $('.admin-controls .btn').attr('disabled', 'disabled');
            $('.admin-controls .reveal-poker').removeAttr('disabled');
        });

        //for chat area (may remove)
        $('#message-form').submit(function (e) {
            e.preventDefault(); // prevents page reloading
            socket.emit('chatMessage', { "room": hash, "message": $('#message').val() });
            $('#message').val('');
            return false;
        });

        //any messages append to this feed (may turn into json)
        socket.on('newChatMessage', function (message) {
            $('#messages').append($('<li class="list-group-item">').html(message));
        });

        //reload user list
        socket.on('updateUsers', function (users) {
            $('#users').empty();
            $.each(users, function (i, val) {
                let classes = '';
                let attributes = '';
                let element = 'button type="button"';
                let string = val.name;
                if (val.played == true) {
                    string = '<span class="badge badge-success badge-pill">Played</span>' + string;
                }
                if (val.is_host == true) {
                    string += '<span class="badge badge-primary badge-pill">Admin</span>';
                    if (i == socket.id) {
                        isHost = true;
                        $('.edit-task-btn').show();
                        $('.admin-controls').show();
                        $('.admin-controls .btn').attr('disabled', 'disabled');
                        $('.admin-controls .start-poker').removeAttr('disabled');
                        $('.admin-controls .reset-poker').removeAttr('disabled');
                        $('.admin-controls .edit-task-btn').removeAttr('disabled');
                    }
                }
                if (i == socket.id) {
                    $('.poker-username').text(val.name);
                    element = 'div';
                    classes += ' list-group-item-primary';
                    if (val.is_host == false) {
                        isHost = false;
                        $('.edit-task-btn').hide();
                        $('.admin-controls').hide();
                    }
                } else {
                    classes += ' list-group-item-action';
                }
                attributes += ' data-userid="' + i + '" data-username="' + val.name + '"';
                $('#users').append($('<' + element + ' class="list-group-item d-flex member-item justify-content-between align-items-center' + classes + '"' + attributes + '>').html(string));
            });
        });

        //edit task button
        $('.edit-task-btn').on('click', function () {
            $('#task-name-area').hide();
            $('#task-name-form').show();
            $('#task-name-field').val($('#task-name').text()).focus();
        });

        //set user admin
        $(document).on('click', '.member-item', function () {
            if (isHost) {
                var setAdmin = confirm("Would you like to make " + $(this).data('username') + " an admin?");
                if (setAdmin == true) {
                    socket.emit('changeHost', { "room": hash, "user_id": $(this).data('userid') });
                }
            }
        });

        $('#task-name-form').submit(function (e) {
            e.preventDefault(); // prevents page reloading
            const newTaskName = $('#task-name-field').val();
            socket.emit('changeTaskName', { "room": hash, "name": newTaskName });
            $('#task-name-area').show();
            $('#task-name-form').hide();
            return false;
        });

        //update task name text
        socket.on('updateTaskName', function (newTaskName) {
            $('#task-name').text(newTaskName);
        });

    }
</script>