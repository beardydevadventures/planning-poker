<div id="roomNo" class="alert alert-primary" role="alert">
    Placeholder message...
</div>

<div class="row">
    <div class="col">
        <div class="text-center">
            <div id="task-name-area">
                <h1 id="task-name" class="d-inline mb-2">New Task</h1>
                <button class="btn btn-outline-secondary btn-sm ml-2 edit-task-btn">edit</button>
            </div>
            <form id="task-name-form" class="form-inline">

                <div class="form-group mb-2">
                    <label for="task-name-field" class="sr-only">Task Name</label>
                    <input type="text" class="form-control-plaintext" id="task-name-field" value="New Task">
                </div>
                <button type="submit" class="btn btn-primary mb-2">Save</button>
            </form>
            <hr>
        </div>

        <div class="text-center mb-3">
            {{#each cards}}
            {{> card this}}
            {{/each}}
        </div>

        <div class="progress mb-3">
            <div class="progress-bar poker-progress-bar" style="width: 0%;" role="progressbar" aria-valuenow="00" aria-valuemin="0"
                aria-valuemax="100"></div>
        </div>

        <ul id="messages" class="list-group"></ul>
    </div>
    <div class="col-3">
        <div class="admin-controls mb-3">
            <button type="button" class="btn btn-outline-success btn-block start-poker">Start</button>
            <button type="button" class="btn btn-outline-info btn-block reveal-poker">Reveal</button>
            <button type="button" class="btn btn-outline-danger btn-block stop-poker">Stop</button>
            <button type="button" class="btn btn-outline-warning btn-block reset-poker">Reset</button>
        </div>
        <h3>Users</h3>
        <ul id="users" class="list-group mb-3"></ul>

        <form id="message-form" class="form-inline ">
            <div class="input-group mb-3">
                <input type="text" class="form-control" id="message" placeholder="Message group..." aria-label="message"
                    aria-describedby="button-addon2">
                <div class="input-group-append">
                    <button class="btn btn-outline-secondary" type="submit" id="button-addon2">Send</button>
                </div>
            </div>
        </form>
    </div>
</div>
{{> scripts}}
<script>
    $(function () {
        let roomData = {};
        if (window.location.hash) {
            hash = window.location.hash.substring(1);
            roomData.hash = hash;
            roomData.roomname = '';
            roomData.username = '';
            roomController(roomData);
        } else {
            window.location.href = "/";
        }
    });

    function roomController(roomData) {
        const socket = io();

        //hide all controls
        $('#task-name-form').hide();
        $('.edit-task-btn').hide();
        $('.admin-controls').hide();

        //disable cards
        $('.poker-card').attr('disabled', 'disabled');

        //connecting to room
        socket.emit('connectToRoom', roomData);

        socket.on('connectedToRoom', function (response) {
            $('#roomNo').text(response.message);
            if (response.is_host) {
                $('.edit-task-btn').show();
                $('.admin-controls').show();
            } else {
                //we need to show all room content
            }
        });

        //for planning poker
        $('.start-poker').on("click", function () {
            socket.emit('startPoker', { "room": hash });
        });

        $('.reset-poker').on("click", function () {
            socket.emit('restartPoker', { "room": hash });
        });

        $('.stop-poker').on("click", function () {
            socket.emit('stopPoker', { "room": hash });
        });

        $('.reveal-poker').on("click", function () {
            socket.emit('revealPoker', { "room": hash });
        });

        $('.poker-card').on("click", function () {
            let value = $(this).data("value");
            $('.poker-card').attr('disabled', 'disabled');
            socket.emit('pokerPlayed', { "room": hash, "value": value, "user": socket.id });
        });

        socket.on('unlockCards', function (msg) {
            $('.poker-card').removeAttr('disabled');
        });

        socket.on('lockCards', function (msg) {
            $('.poker-card').attr('disabled', 'disabled');
        });

        socket.on('updatePercentage', function (percent) {
            $('.poker-progress-bar').width(percent + '%');
        });

        //for chat area (may remove)
        $('#message-form').submit(function (e) {
            e.preventDefault(); // prevents page reloading
            socket.emit('chatMessage', { "room": hash, "message": $('#message').val() });
            $('#message').val('');
            return false;
        });

        //any messages append to this feed (may turn into json)
        socket.on('newChatMessage', function (message) {
            $('#messages').append($('<li class="list-group-item">').text(message));
        });

        //reload user list
        socket.on('updateUsers', function (users) {
            $('#users').empty();
            $.each(users, function (i, val) {
                let classes = '';
                if (val['is_host'] == true) {
                    classes += ' active';
                }
                $('#users').append($('<li class="list-group-item' + classes + '">').text(val['name']));
            });
        });  

        //edit task button
        $('.edit-task-btn').click(function () {
            var dad = $(this).parent().parent();
            $('#task-name-area').hide();
            $('#task-name-form').show();
            $('#task-name-field').val($('#task-name').text()).focus();
        });

        $('#task-name-form').submit(function (e) {
            e.preventDefault(); // prevents page reloading
            const newTaskName = $('#task-name-field').val();
            socket.emit('changeTaskName', { "room": hash, "name": newTaskName });
            $('#task-name-area').show();
            $('#task-name-form').hide();
            return false;
        });

        //update task name text
        socket.on('updateTaskName', function (newTaskName) {
            $('#task-name').text(newTaskName);
        });

    }
</script>